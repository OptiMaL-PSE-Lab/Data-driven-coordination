# -*- coding: utf-8 -*-
"""
Created on Fri Jul  2 22:33:43 2021

@author: dv516
"""

from Problems.ToyProblem1 import f1, f2

from Algorithms.PyBobyqa_wrapped.Wrapper_for_pybobyqa import PyBobyqaWrapper
from Algorithms.DIRECT_wrapped.Wrapper_for_Direct import DIRECTWrapper
from Algorithms.ALADIN_Data import System as ALADIN_Data
from Algorithms.ADMM_Scaled_Consensus import System as ADMM_Scaled
from Algorithms.Coordinator_Augmented import System as Coordinator_ADMM
from Algorithms.CUATRO import CUATRO
from GPyOpt.methods import BayesianOptimization

import numpy as np
import matplotlib.pyplot as plt


def postprocessing(ax1, ax2, ax3, string, actual_f, result, 
                   marker = 'None', s = 10, linetype = '-', c = 'k',
                   coord_input = False, ALADIN = False, samecoord = False):
    if ALADIN:
        if samecoord:
            obj_arr = np.array(result.best_obj)
            n_eval = np.array(result.n_eval)
            obj_global = np.array(result.obj_global)
            z_arr = np.array(result.center_list)
            ax2.scatter(z_arr, obj_arr, label = string, s = 10)
            conv_arr = (obj_arr - actual_f)**2 
            ax1.step(n_eval, conv_arr, '--', where = 'post', label = string)
            ax3.step(n_eval, obj_arr, '--', where = 'post', label = string)
        else:
            obj_global = np.sum(np.array([result.obj[i+1] for i in range(N)]), axis = 0)
            z_arr = np.mean([result.z_list[idx+1][global_ind[0]] for idx in range(N)], axis = 0)
            ax2.scatter(z_arr[1:], obj_global, label = string, s = 10)
            conv_arr = (obj_global - actual_f)**2 
            n_eval = np.arange(len(obj_global))+1
            ax1.step(n_eval, conv_arr, '--', where = 'post', label = string)
            ax3.step(n_eval, obj_global, '--', where = 'post', label = string)
    elif not coord_input:
        obj_arr = np.sum(np.array([result.obj[i+1] for i in range(N)]), axis = 0)
        z_arr = np.array(result.z_list[global_ind[0]])
        conv_arr = (obj_arr - actual_f)**2 
        ax1.step(np.arange(len(obj_arr))+1, conv_arr, '--', where = 'post', label = string)
        ax3.step(np.arange(len(obj_arr))+1, obj_arr, '--', where = 'post', label = string)
        if not samecoord:
            ax2.scatter(z_arr[1:], obj_arr, label = string, s = 10)
        else:
            ax2.scatter(z_arr, obj_arr, label = string, s = 10)  
    else:
        f = np.array(result['f_store'])
        x_list = np.array([result['x_store']])
        f_best = np.array(result['f_best_so_far'])
        ind_best = np.array(result['samples_at_iteration'])       
        ax1.step(ind_best, (f_best - actual_f)**2, '--', where = 'post', label = string)
        ax2.scatter(x_list, f, label = string, s = 10)
        ax3.step(ind_best, f_best, '--', where = 'post', label = string)
        
    return ax1, ax2, ax3

def postprocessing_residual(result, ax, string, marker = 'None', s = 10, linetype = '-', c = 'k'):
    ax1, ax2 = ax
    prim_res_arr = np.array(result.prim_r)
    dual_res_arr = np.array(result.dual_r)   
    ax1.step(np.arange(len(prim_res_arr))+1, prim_res_arr, linetype, linewidth = 1, marker = marker, where = 'post', label = string)
    ax2.step(np.arange(len(dual_res_arr))+1, dual_res_arr, linetype, linewidth = 1, marker = marker, where = 'post', label = string)
    return ax1, ax2

N_it = 50

N = 2
N_var = 3
list_fi = [f1, f2]

global_ind = [3]
index_agents = {1: [1, 3], 2: [2, 3]}
z = {3: 4.5}

actual_f = 13.864179350870021
actual_x = 0.398

rho = 500

ADMM_Scaled_system = ADMM_Scaled(N, N_var, index_agents, global_ind)
ADMM_Scaled_system.initialize_ADMM(rho, N_it, list_fi, z)
ADMM_Scaled_system.solve_ADMM()

s = 'ADMM_Scaled'
print(s+': ', 'Done')

rho = 500

ADMM_onlyRho_system = ADMM_onlyRho(N, N_var, index_agents, global_ind)
ADMM_onlyRho_system.initialize_Decomp(rho, N_it, list_fi, z)
ADMM_onlyRho_system.solve_Decomp()
 
s = 'ADMM_onlyRho'
print(s+': ', 'Done')

rho = 5000 # previous run was 500 # originally 5000

x0 = np.array([z[3]])
bounds = np.array([[-10, 10]])
init_trust = 1
beta = 0.5

Coordinator_ADMM_system = Coordinator_ADMM(N, N_var, index_agents, global_ind)
Coordinator_ADMM_system.initialize_Decomp(rho, N_it, list_fi, z)
output_Coord1 = Coordinator_ADMM_system.solve(CUATRO, x0, bounds, init_trust, 
                            budget = N_it, beta_red = beta)    

s = 'Coordinator_ADMM'
print(s+': ', 'Done')

Coordinator_ADMM_system_inc = Coordinator_ADMM(N, N_var, index_agents, global_ind)
Coordinator_ADMM_system_inc.initialize_Decomp(rho, N_it, list_fi, z, rho_inc = 1.15)
output_Coord1_inc = Coordinator_ADMM_system_inc.solve(CUATRO, x0, bounds, init_trust, 
                            budget = N_it, beta_red = beta)    

s = 'Coordinator_ADMM_inc'
print(s+': ', 'Done')


Coordinator_ADMM_withU_system = Coordinator_ADMM_withU(N, N_var, index_agents, global_ind)
Coordinator_ADMM_withU_system.initialize_Decomp(rho, N_it, list_fi, z)
output_Coord1_withU = Coordinator_ADMM_withU_system.solve(CUATRO, x0, bounds, init_trust, 
                            budget = N_it, beta_red = beta)  
s = 'Coordinator_ADMM_withU'
print(s+': ', 'Done')

Coordinator_ADMM_withU_system_inc = Coordinator_ADMM_withU(N, N_var, index_agents, global_ind)
Coordinator_ADMM_withU_system_inc.initialize_Decomp(rho, N_it, list_fi, z, rho_inc = 1.15)
output_Coord1_withU_inc = Coordinator_ADMM_withU_system_inc.solve(CUATRO, x0, bounds, init_trust, 
                            budget = N_it, beta_red = beta)  
s = 'Coordinator_ADMM_withU_inc'
print(s+': ', 'Done')

Coordinator_withConstr_system = Coordinator_withConstr(N, N_var, index_agents, global_ind)
Coordinator_withConstr_system.initialize_Decomp(rho, N_it, list_fi, z)
output_Coord2 = Coordinator_withConstr_system.solve(CUATRO, x0, bounds, init_trust, 
                            budget = N_it, beta_red = beta)    

s = 'Coordinator_Constr'
print(s+': ', 'Done')

Coordinator_withConstr_system_inc = Coordinator_withConstr(N, N_var, index_agents, global_ind)
Coordinator_withConstr_system_inc.initialize_Decomp(rho, N_it, list_fi, z, rho_inc = 1.15)
output_Coord2_inc = Coordinator_withConstr_system_inc.solve(CUATRO, x0, bounds, init_trust, 
                            budget = N_it, beta_red = beta)    

s = 'Coordinator_Constr_inc'
print(s+': ', 'Done')



lmbda = 0
AD_list = [AD_1, AD_2]
f_list_Al = [f1Al, f2Al]
A1, A2, A3, A4 = np.zeros((6, )), np.zeros((6, 4)), np.zeros((6, 4)), np.zeros((6, 4))

A_dict = {1: np.array([[0, 1]]), 2: np.array([[0, -1]])}

ALADIN_system = ALADIN(N, N_var, index_agents, global_ind)
ALADIN_system.initialize_ALADIN(rho, N_it, lmbda, z, f_list_Al, AD_list, A_dict)
ALADIN_system.solve_ALADIN()

s = 'ALADIN'
print(s+': ', 'Done')

# ALADIN_DF_system = ALADIN_DF(N, N_var, index_agents, global_ind)
# ALADIN_DF_system.initialize_ALADIN(rho, N_it, lmbda, z, f_list_Al, AD_list, A_dict)
# ALADIN_DF_system.solve_ALADIN()

# s = 'ALADIN_DF'
# print(s+': ', 'Done')

# rho = 50
N_it = 50

#N = 2
#N_var = 3
list_fi = [f1, f2]

global_ind = [3]
#index_agents = {1: [1, 3], 2: [2, 3]}
z = {3: 4.5}

actual_f = 13.864179350870021
actual_x = 0.398

A_dict = {1: np.array([[1]]), 2: np.array([[-1]])}

System_dataAL_Constr = ALADIN_Data(N, N_var, index_agents, global_ind)
System_dataAL_Constr.initialize(rho, N_it, z, list_fi, A_dict)
System_dataAL_Constr.solve(6, init_trust, mu = 1e7)

s = 'ALADIN_Data'
print(s+': ', 'Done')

System_dataAL = ALADIN_Data(N, N_var, index_agents, global_ind)
System_dataAL.initialize(rho, N_it, z, list_fi, A_dict)
System_dataAL.solve(6, init_trust, mu = 1e7, infeas_start = True)

s = 'ALADIN_Data_Constr'
print(s+': ', 'Done')

System_dataAL_Constr_inc = ALADIN_Data(N, N_var, index_agents, global_ind)
System_dataAL_Constr_inc.initialize(rho, N_it, z, list_fi, A_dict, rho_inc = 1.2)
System_dataAL_Constr_inc.solve(6, init_trust, mu = 1e7)

s = 'ALADIN_Data_inc'
print(s+': ', 'Done')

System_dataAL_inc = ALADIN_Data(N, N_var, index_agents, global_ind)
System_dataAL_inc.initialize(rho, N_it, z, list_fi, A_dict, rho_inc = 1.2)
System_dataAL_inc.solve(6, init_trust, mu = 1e7, infeas_start = True)

s = 'ALADIN_Data_Constr_inc'
print(s+': ', 'Done')

list_fi = [f1Al, f2Al]

# rho = 500

# global_ind = [3]
# index_agents = {1: [1, 3], 2: [2, 3]}
# z = {3: 4.5}

# actual_f = 13.864179350870021
# actual_x = 0.398


A_dict = {1: np.array([[1]]), 2: np.array([[-1]])}
lmbda = 0

System_dataAL2 = ALADIN_Data2(N, N_var, index_agents, global_ind)
System_dataAL2.initialize(rho, N_it, lmbda, z, 
                          list_fi, A_dict)
System_dataAL2.solve(6, init_trust, mu = 1e7, infeas_start=True)

s = 'ALADIN_Data2'
print(s+': ', 'Done')

System_dataAL2_inc = ALADIN_Data2(N, N_var, index_agents, global_ind)
System_dataAL2_inc.initialize(rho, N_it, lmbda, z, 
                          list_fi, A_dict, rho_inc = 1.2)
System_dataAL2_inc.solve(6, init_trust, mu = 1e7, infeas_start=True)

s = 'ALADIN_Data2_inc'
print(s+': ', 'Done')

System_dataAL2_Constr = ALADIN_Data2(N, N_var, index_agents, global_ind)
System_dataAL2_Constr.initialize(rho, N_it, lmbda, z, 
                          list_fi, A_dict)
System_dataAL2_Constr.solve(6, init_trust, mu = 1e7)

s = 'ALADIN_Data2_Constr'
print(s+': ', 'Done')

System_dataAL2_Constr_inc = ALADIN_Data2(N, N_var, index_agents, global_ind)
System_dataAL2_Constr_inc.initialize(rho, N_it, lmbda, z, 
                          list_fi, A_dict, rho_inc = 1.2)
System_dataAL2_Constr_inc.solve(6, init_trust, mu = 1e7)

s = 'ALADIN_Data2_Constr_inc'
print(s+': ', 'Done')

fig1 = plt.figure() 
ax1 = fig1.add_subplot() 
fig2 = plt.figure() 
ax2 = fig2.add_subplot() 
fig3 = plt.figure() 
ax3 = fig3.add_subplot() 

s = 'ALADIN'
out = postprocessing(ax1, ax2, ax3, s, actual_f, ALADIN_system, ALADIN = True)
ax1, ax2, ax3 = out

s = 'CUATRO_2'
out = postprocessing(ax1, ax2, ax3, s, actual_f, System_dataAL, ALADIN = True, samecoord = True)
ax1, ax2, ax3 = out

s = 'CUATRO_2_withL'
out = postprocessing(ax1, ax2, ax3, s, actual_f, System_dataAL2, ALADIN = True, samecoord = True)
ax1, ax2, ax3 = out

s = 'CUATRO_2_Constr'
out = postprocessing(ax1, ax2, ax3, s, actual_f, System_dataAL_Constr, ALADIN = True, samecoord = True)
ax1, ax2, ax3 = out

s = 'CUATRO_2_withL_Constr'
out = postprocessing(ax1, ax2, ax3, s, actual_f, System_dataAL2_Constr, ALADIN = True, samecoord = True)
ax1, ax2, ax3 = out


ax1.scatter(actual_x, 0, c = 'red', label = 'optimum')
ax1.set_xlabel('Number of function evaluations')
ax1.set_ylabel('Convergence')
ax1.legend()
ax1.set_yscale('log')
fig1.savefig('Convergence_Plot_ALADIN.svg', format = "svg")

ax2.scatter(actual_x, actual_f, c = 'black', label = 'Optimum')
ax2.scatter(z[3], ADMM_onlyRho_system.obj[1][0] + ADMM_onlyRho_system.obj[2][0], 
            s = 25, marker = 'X', c = 'black', label = 'Starting point')
ax2.set_xlabel('Shared variable $x_3$')
ax2.set_ylabel('Function evaluation')
ax2.legend()
ax2.set_yscale('log')
fig2.savefig('Solution_Space_ALADIN.svg', format = "svg")

ax3.plot(np.array([1, 51]), np.array([actual_f, actual_f]), c = 'red', label = 'optimum')
ax3.set_xlabel('Number of function evaluations')
ax3.set_ylabel('Best function evaluation')
ax3.legend()
ax3.set_yscale('log')
fig3.savefig('BestEval_Plot_ALADIN.svg', format = "svg")

fig1 = plt.figure() 
ax1 = fig1.add_subplot() 
fig2 = plt.figure() 
ax2 = fig2.add_subplot() 
fig3 = plt.figure() 
ax3 = fig3.add_subplot() 

s = 'ALADIN'
out = postprocessing(ax1, ax2, ax3, s, actual_f, ALADIN_system, ALADIN = True)
ax1, ax2, ax3 = out

s = 'CUATRO_2_inc'
out = postprocessing(ax1, ax2, ax3, s, actual_f, System_dataAL_inc, ALADIN = True, samecoord = True)
ax1, ax2, ax3 = out

s = 'CUATRO_2_withL_inc'
out = postprocessing(ax1, ax2, ax3, s, actual_f, System_dataAL2_inc, ALADIN = True, samecoord = True)
ax1, ax2, ax3 = out

s = 'CUATRO_2_Constr_inc'
out = postprocessing(ax1, ax2, ax3, s, actual_f, System_dataAL_Constr_inc, ALADIN = True, samecoord = True)
ax1, ax2, ax3 = out

s = 'CUATRO_2_withL_Constr_inc'
out = postprocessing(ax1, ax2, ax3, s, actual_f, System_dataAL2_Constr_inc, ALADIN = True, samecoord = True)
ax1, ax2, ax3 = out


ax1.scatter(actual_x, 0, c = 'red', label = 'optimum')
ax1.set_xlabel('Number of function evaluations')
ax1.set_ylabel('Convergence')
ax1.legend()
ax1.set_yscale('log')
# fig1.savefig('Convergence_Plot_ALADIN.svg', format = "svg")

ax2.scatter(actual_x, actual_f, c = 'black', label = 'Optimum')
ax2.scatter(z[3], ADMM_onlyRho_system.obj[1][0] + ADMM_onlyRho_system.obj[2][0], 
            s = 25, marker = 'X', c = 'black', label = 'Starting point')
ax2.set_xlabel('Shared variable $x_3$')
ax2.set_ylabel('Function evaluation')
ax2.legend()
ax2.set_yscale('log')
# fig2.savefig('Solution_Space_ALADIN.svg', format = "svg")

ax3.plot(np.array([1, 51]), np.array([actual_f, actual_f]), c = 'red', label = 'optimum')
ax3.set_xlabel('Number of function evaluations')
ax3.set_ylabel('Best function evaluation')
ax3.legend()
ax3.set_yscale('log')
# fig3.savefig('BestEval_Plot_ALADIN.svg', format = "svg")

fig1 = plt.figure() 
ax1 = fig1.add_subplot() 
fig2 = plt.figure() 
ax2 = fig2.add_subplot() 
fig3 = plt.figure() 
ax3 = fig3.add_subplot() 

s = 'ADMM'
out = postprocessing(ax1, ax2, ax3, s, actual_f, ADMM_Scaled_system)
ax1, ax2, ax3 = out

s = 'ADMM_onlyRho'
out = postprocessing(ax1, ax2, ax3, s, actual_f, ADMM_onlyRho_system)
ax1, ax2, ax3 = out

s = 'CUATRO_1'
out = postprocessing(ax1, ax2, ax3, s, actual_f, output_Coord1, coord_input = True)
ax1, ax2, ax3 = out

s = 'CUATRO_1_withU'
out = postprocessing(ax1, ax2, ax3, s, actual_f, output_Coord1_withU, coord_input = True)
ax1, ax2, ax3 = out

s = 'CUATRO_1_Constr'
out = postprocessing(ax1, ax2, ax3, s, actual_f, output_Coord2, coord_input = True)
ax1, ax2, ax3 = out

ax1.scatter(actual_x, 0, c = 'red', label = 'optimum')
ax1.set_xlabel('Number of function evaluations')
ax1.set_ylabel('Convergence')
ax1.legend()
ax1.set_yscale('log')
fig1.savefig('Convergence_Plot_ADMM.svg', format = "svg")

ax2.scatter(actual_x, actual_f, c = 'black', label = 'Optimum')
ax2.scatter(z[3], ADMM_onlyRho_system.obj[1][0] + ADMM_onlyRho_system.obj[2][0], 
            s = 25, marker = 'X', c = 'black', label = 'Starting point')
ax2.set_xlabel('Shared variable $x_3$')
ax2.set_ylabel('Function evaluation')
ax2.legend(loc = 'lower right')
ax2.set_yscale('log')
fig2.savefig('Solution_Space_ADMM.svg', format = "svg")

ax3.plot(np.array([1, 51]), np.array([actual_f, actual_f]), c = 'red', label = 'optimum')
ax3.set_xlabel('Number of function evaluations')
ax3.set_ylabel('Best function evaluation')
ax3.legend()
ax3.set_yscale('log')
fig3.savefig('BestEval_Plot_ADMM.svg', format = "svg")

fig1 = plt.figure() 
ax1 = fig1.add_subplot() 
fig2 = plt.figure() 
ax2 = fig2.add_subplot() 
fig3 = plt.figure() 
ax3 = fig3.add_subplot() 

s = 'ADMM'
out = postprocessing(ax1, ax2, ax3, s, actual_f, ADMM_Scaled_system)
ax1, ax2, ax3 = out

s = 'ADMM_onlyRho'
out = postprocessing(ax1, ax2, ax3, s, actual_f, ADMM_onlyRho_system)
ax1, ax2, ax3 = out

s = 'CUATRO_1_inc'
out = postprocessing(ax1, ax2, ax3, s, actual_f, output_Coord1_inc, coord_input = True)
ax1, ax2, ax3 = out

s = 'CUATRO_1_withU_inc'
out = postprocessing(ax1, ax2, ax3, s, actual_f, output_Coord1_withU_inc, coord_input = True)
ax1, ax2, ax3 = out

s = 'CUATRO_1_Constr_inc'
out = postprocessing(ax1, ax2, ax3, s, actual_f, output_Coord2_inc, coord_input = True)
ax1, ax2, ax3 = out

ax1.scatter(actual_x, 0, c = 'red', label = 'optimum')
ax1.set_xlabel('Number of function evaluations')
ax1.set_ylabel('Convergence')
ax1.legend()
ax1.set_yscale('log')
# fig1.savefig('Convergence_Plot_ADMM.svg', format = "svg")

ax2.scatter(actual_x, actual_f, c = 'black', label = 'Optimum')
ax2.scatter(z[3], ADMM_onlyRho_system.obj[1][0] + ADMM_onlyRho_system.obj[2][0], 
            s = 25, marker = 'X', c = 'black', label = 'Starting point')
ax2.set_xlabel('Shared variable $x_3$')
ax2.set_ylabel('Function evaluation')
ax2.legend(loc = 'lower right')
ax2.set_yscale('log')
# fig2.savefig('Solution_Space_ADMM.svg', format = "svg")

ax3.plot(np.array([1, 51]), np.array([actual_f, actual_f]), c = 'red', label = 'optimum')
ax3.set_xlabel('Number of function evaluations')
ax3.set_ylabel('Best function evaluation')
ax3.legend()
ax3.set_yscale('log')
# fig3.savefig('BestEval_Plot_ADMM.svg', format = "svg")


fig1 = plt.figure() 
ax1 = fig1.add_subplot() 
fig2 = plt.figure() 
ax2 = fig2.add_subplot() 

s = 'ADMM'
ax = ax1, ax2
out = postprocessing_residual(ADMM_Scaled_system, ax, s)
ax1, ax2 = out

s = 'ADMM_onlyRho'
ax = ax1, ax2
out = postprocessing_residual(ADMM_onlyRho_system, ax, s)
ax1, ax2 = out

s = 'CUATRO_1'
ax = ax1, ax2
out = postprocessing_residual(Coordinator_ADMM_system, ax, s)
ax1, ax2 = out

s = 'CUATRO_1_withU'
ax = ax1, ax2
out = postprocessing_residual(Coordinator_ADMM_withU_system, ax, s)
ax1, ax2 = out

s = 'CUATRO_1_Constr'
ax = ax1, ax2
out = postprocessing_residual(Coordinator_withConstr_system, ax, s)
ax1, ax2 = out

ax1.set_xlabel('Number of function evaluations')
ax1.set_ylabel('Primal residual')
ax1.legend()
ax1.set_yscale('log')
fig1.savefig('Primal_Plot_ADMM.svg', format = "svg")

ax2.set_xlabel('Number of function evaluations')
ax2.set_ylabel('Dual residual')
ax2.legend(loc = 'lower right')
ax2.set_yscale('log')
fig2.savefig('Dual_Plot_ADMM.svg', format = "svg")


fig1 = plt.figure() 
ax1 = fig1.add_subplot() 
fig2 = plt.figure() 
ax2 = fig2.add_subplot() 

s = 'ADMM'
ax = ax1, ax2
out = postprocessing_residual(ADMM_Scaled_system, ax, s)
ax1, ax2 = out

s = 'ADMM_onlyRho'
ax = ax1, ax2
out = postprocessing_residual(ADMM_onlyRho_system, ax, s)
ax1, ax2 = out

s = 'CUATRO_1_inc'
ax = ax1, ax2
out = postprocessing_residual(Coordinator_ADMM_system_inc, ax, s)
ax1, ax2 = out

s = 'CUATRO_1_withU_inc'
ax = ax1, ax2
out = postprocessing_residual(Coordinator_ADMM_withU_system_inc, ax, s)
ax1, ax2 = out

s = 'CUATRO_1_Constr_inc'
ax = ax1, ax2
out = postprocessing_residual(Coordinator_withConstr_system_inc, ax, s)
ax1, ax2 = out

ax1.set_xlabel('Number of function evaluations')
ax1.set_ylabel('Primal residual')
ax1.legend()
ax1.set_yscale('log')
# fig1.savefig('Primal_Plot_ADMM.svg', format = "svg")

ax2.set_xlabel('Number of function evaluations')
ax2.set_ylabel('Dual residual')
ax2.legend(loc = 'lower right')
ax2.set_yscale('log')
# fig2.savefig('Dual_Plot_ADMM.svg', format = "svg")



fig1 = plt.figure() 
ax1 = fig1.add_subplot() 
fig2 = plt.figure() 
ax2 = fig2.add_subplot() 

s = 'ALADIN'
ax = ax1, ax2
out = postprocessing_residual( ALADIN_system, ax, s)
ax1, ax2 = out

s = 'CUATRO_2'
ax = ax1, ax2
out = postprocessing_residual(System_dataAL, ax, s)
ax1, ax2 = out

s = 'CUATRO_2_withL'
ax = ax1, ax2
out = postprocessing_residual(System_dataAL2, ax, s)
ax1, ax2 = out

s = 'CUATRO_2_Constr'
ax = ax1, ax2
out = postprocessing_residual(System_dataAL_Constr, ax, s)
ax1, ax2 = out

s = 'CUATRO_2_withL_Constr'
ax = ax1, ax2
out = postprocessing_residual(System_dataAL2_Constr, ax, s)
ax1, ax2 = out

ax1.set_xlabel('Number of function evaluations')
ax1.set_ylabel('Primal residual')
ax1.legend()
ax1.set_yscale('log')
fig1.savefig('Primal_Plot_ALADIN.svg', format = "svg")

ax2.set_xlabel('Number of function evaluations')
ax2.set_ylabel('Dual residual')
ax2.legend(loc = 'lower right')
ax2.set_yscale('log')
fig2.savefig('Dual_Plot_ALADIN.svg', format = "svg")


fig1 = plt.figure() 
ax1 = fig1.add_subplot() 
fig2 = plt.figure() 
ax2 = fig2.add_subplot() 

s = 'ALADIN'
ax = ax1, ax2
out = postprocessing_residual( ALADIN_system, ax, s)
ax1, ax2 = out

s = 'CUATRO_2_inc'
ax = ax1, ax2
out = postprocessing_residual(System_dataAL_inc, ax, s)
ax1, ax2 = out

s = 'CUATRO_2_withL_inc'
ax = ax1, ax2
out = postprocessing_residual(System_dataAL2_inc, ax, s)
ax1, ax2 = out

s = 'CUATRO_2_Constr_inc'
ax = ax1, ax2
out = postprocessing_residual(System_dataAL_Constr_inc, ax, s)
ax1, ax2 = out

s = 'CUATRO_2_withL_Constr_inc'
ax = ax1, ax2
out = postprocessing_residual(System_dataAL2_Constr_inc, ax, s)
ax1, ax2 = out

ax1.set_xlabel('Number of function evaluations')
ax1.set_ylabel('Primal residual')
ax1.legend()
ax1.set_yscale('log')
# fig1.savefig('Primal_Plot_ALADIN.svg', format = "svg")

ax2.set_xlabel('Number of function evaluations')
ax2.set_ylabel('Dual residual')
ax2.legend(loc = 'lower right')
ax2.set_yscale('log')
# fig2.savefig('Dual_Plot_ALADIN.svg', format = "svg")






